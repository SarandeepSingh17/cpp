/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* mergeSort(ListNode* l1, ListNode* l2)
    {
        ListNode* d=new ListNode(-1);
        ListNode* t=d;
        while(l1 && l2)
        {
            if(l1->val<l2->val)
            {
                t->next=l1;
                l1=l1->next;
            }
            else
            {
                t->next=l2;
                l2=l2->next;
            }
            t=t->next;
        }
        if(l1)
        {
            t->next=l1;
            l1=l1->next;
        }
        if(l2)
        {
            t->next=l2;
            l2=l2->next;
        }
        return d->next;
    }
public:
    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next)
            return head;
        ListNode* fast=head;
        ListNode* slow=head;
        ListNode* temp=head;
        while(fast && fast->next)
        {
            temp=slow;
            slow=slow->next;
            fast=fast->next->next; 
        }
        temp->next=NULL;
        ListNode *left=sortList(head);
        ListNode *right=sortList(slow);
        return mergeSort(left,right);
    }
};
